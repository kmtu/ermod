#!/usr/bin/env python

import os
import os.path
import sys
import pickle
from optparse import OptionParser
import subprocess

parser = OptionParser()

# topology, mandatory
parser.add_option("-t", "--top", dest = "topology",
                  help = "gromacs topology file (*.top) for solution",
                  default = None)

# "#define"s.
parser.add_option("-D", dest = "defines", action="append",
                  help="defined attributes",
                  default = [])
parser.add_option("-I", dest = "includes", action="append",
                  help="#include directive lookup paths",
                  default = [])
parser.add_option("--cpp", dest = "cpp",
                  help = "how to invoke cpp (1) command (default = cpp)",
                  default = "cpp")

# can be specified; otherwise specify interactively
parser.add_option("-s", "--solute", dest = "solute",
                  help = "Molecular type of solute molecule (comma separated for multiple choice)",
                  default = None)

parser.add_option("-v", "--verbose", dest = "verbose", action = "store_true",
                  help = "Increase verbosity (for debug)",
                  default = False)

(options, args) = parser.parse_args()

def log(x):
    if options.verbose:
        print >> sys.stderr, x

def warn_or_error(x):
    prefix = ""
    suffix = ""
    if os.isatty(sys.stderr.fileno()):
        prefix = "\x1b[31;1m"
        suffix = "\x1b[0m"
    print >> sys.stderr, prefix + x + suffix

def warn(x):
    warn_or_error(x)

def error(x):
    warn_or_error(x)

if options.topology == None:
    error("Error: topology must be specified (try --help)")
    sys.exit(1)

def where_gromacs():
    try:
        sp = subprocess.Popen("which luck", shell=True, stdout=subprocess.PIPE)
        output = sp.communicate()[0]
        if output == "":
            sp = subprocess.Popen("which g_luck", shell=True, stdout=subprocess.PIPE)
            output = sp.communicate()[0]
            if outout == "":
                warn("Could not find luck / g_luck (1). Default search path is not set; please specify with -I")
                return

        rp = os.path.realpath(output)
        bindir = os.path.dirname(rp)
        p = os.path.normpath(os.path.join(bindir, "../share/gromacs/top"))
        if os.path.exists(p):
            log("Found gromacs topology path %s" % p)
            options.includes.append(p)

    except OSError, e:
        pass

carryover = {}

class topology:
    def __init__(self):
        self.atomtype = {}
        self.bondtype = {}
        self.atom2type = {}
        self.atom2charge = {}
        self.atom2mass = {}
        self.atom2sigma = {}
        self.atom2epsilon = {}
        self.moleculetypes = {}
        self.molecules = []
        self.system = []
        self.ljtype = 0

    def process_defaults(self, ls):
        if int(ls[0]) != 1:
            warn("Non-bond type is Buckingham potential, which is not supported")
        self.ljtype = int(ls[1])
        pat = self.ljtype - 1
        log("LJtype = %s" % (["C6/CN - geometric mean",
                              "arithmetic mean",
                              "geometric mean"][pat]))
        global carryover
        carryover["ljformat"] = ["C6C12", "sigeps", "sigeps"][pat]
        carryover["ljtype"] = ["geometric", "arithmetic", "geometric"][pat]

    def process_atomtypes(self, ls):
        if len(ls) == 6:
            mode = "shortform"
        else:
            try:
                int(ls[1])
                mode = "bondtype"
            except ValueError:
                mode = "atomnumber"
  
        if mode == "shortform":
            aname = ls[0]
            mass = float(ls[1])
            charge = float(ls[2])
            sigma = float(ls[4])
            eps = float(ls[5])
        else:
            aname = ls[0]
            mass = float(ls[2])
            charge = float(ls[3])
            sigma = float(ls[5])
            eps = float(ls[6])
        self.atom2mass[aname] = mass
        self.atom2charge[aname] = charge
        self.atom2sigma[aname] = sigma
        self.atom2epsilon[aname] = eps

    def process_atoms(self, mtype, ls):
        _anum = ls[0]
        atype = ls[1]
        _resnum = ls[2]
        _resname = ls[3]
        atom = ls[4]
        _chargegrp = ls[5]
        if len(ls) >= 7:
            charge = float(ls[6])
        else:
            charge = self.atom2charge[atype]
        if len(ls) >= 8:
            mass = float(ls[7])
        else:
            mass = self.atom2mass[atype]
        
        self.molecules[self.moleculetypes[mtype]].append((atype, atom, charge, mass))

    def molecule(self, mtype, fh):
        log("Entering molecule section \"%s\"" % mtype)
        self.moleculetypes[mtype] = len(self.molecules)
        self.molecules.append([])

        state = None

        for l in fh:
            l = l.split(';')[0] # remove comments
            l = l.strip()
            if l == "":
                continue
            
            if l[0] == '[':
                state = l.split()[1]
                log("  Entering state %s inside %s" % (state, mtype))
                continue
            
            if l[0] == '#':
                # already parsed by cpp; indicating line nubers etc.
                continue
            
            ls = l.split()
            if state == "atoms":
                self.process_atoms(mtype, ls)
            elif state == "moleculetype":
                return self.molecule(ls[0], fh)
            elif state == "system":
                pass
            elif state == "molecules":
                groupname = ls[0]
                nmol = int(ls[1])
                if nmol != 0:
                    self.system.append((groupname, nmol))
                pass
            else:
                # do nothing; only "atom" section matters
                pass
        pass

    def parse_top(self, fh):
        state = None
        for l in fh:
            l = l.split(';')[0] # remove comments
            l = l.strip()
            if l == "":
                continue
            
            if l[0] == '[':
                state = l.split()[1]
                continue
            
            if l[0] == '#':
                # already parsed by cpp; indicating line nubers etc.
                continue
            
            ls = l.split()
            if ls == []:
                continue
            if state == "defaults":
                self.process_defaults(ls)
            if state == "atomtypes":
                self.process_atomtypes(ls)
            elif state == "moleculetype":
                return self.molecule(ls[0], fh)
            pass

if not os.path.exists(options.topology):
    print >> sys.stderr, "Error: topology file does not exist!"
    sys.exit(1)

where_gromacs()

includes = ["-I" + i for i in options.includes]
defines = ["-D" + d for d in options.defines]
cmd = [options.cpp] + includes + defines + [options.topology]
log("Invoking command: " + repr(cmd))
ppw = subprocess.Popen(cmd, stdout=subprocess.PIPE)

top = topology()
top.parse_top(ppw.stdout)

ppw.stdout.close()
ppw.wait()

if ppw.returncode != 0:
    warn("Warning: cpp reported an error on preprocessing. Perhaps you forgot to add gromacs default topology path (/usr/share/gromacs/top)?")

mass_table = {
  1: 'H',
  2: 'D',
  12: 'C',
  14: 'N',
  15: 'CH3',
  16: 'O',
  19: 'F',
  23: 'Na',
  31: 'P',
  32: 'S',
  35: 'Cl',
  36: 'Cl',
  40: 'Ca',
  56: 'Fe',
  63: 'Cu',
  64: 'Cu',
  65: 'Zn',
  80: 'Br',
  0: 'M' } # dummy atom

def atomtype_of_mass(mass):
    imass = int(round(mass))
    if imass not in mass_table:
        warn("Could not find appropriate atom type from mass (%f); replacing with carbon (12.0)" % mass)
        return 'C'
    return mass_table[imass]

def get_topology_info():
    # make list of segment names
    mollist = [s for (s, _n) in top.system]

    # python 2.3 does not have set()
    if options.solute:
        solutes = options.solute.split(',')
    else:
        # interactive input
        print "Molecule types in topology file:",
        for s in mollist:
            print s,
        print
        l = raw_input("Which molecules are solute? (For multiple choce please specify as comma-separated list) ").split(',')
        solutes = [x.strip() for x in l]

    for s in solutes:
        if s not in mollist:
            print >> sys.stderr, "No such segname in topology: %s" % s
            sys.exit(1)

    # check continuous or not
    # 0: not started 1: started 2: finished
    # "not started" is unnecessary indeed, but for clarity...
    state = 0
    for mol in mollist:
        if state == 0:
            if mol in solutes:
                state = 1
            else:
                pass
        elif state == 1:
            if mol in solutes:
                pass
            else:
                state = 2
        else:
            if mol in solutes:
                print >> sys.stderr, "Error: solute is not contiguous"
                sys.exit(1)
            else:
                pass

    return solutes

solutes = get_topology_info()

def gen(mode):
    if not os.path.exists(mode):
        os.mkdir(mode)
    mdifh = file(mode + "/MDinfo", "wt")
    ntypes = len(top.system) - len(solutes)
    if mode == "soln":
        ntypes += 1 # solute itself
    print >> mdifh, "FRAMES %d" % ntypes
    solute_merge = (len(solutes) == 1)
    if solute_merge:
        # output as in topology (supports multiple solute)
        for (s, n) in top.system:
            if not (mode == "refs" and s in solutes):
                print >> mdifh, "%d" % n,
        print >> mdifh
        for (s, n) in top.system:
            if not (mode == "refs" and s in solutes):
                molno = top.moleculetypes[s]
                print >> mdifh, "%d" % len(top.molecules[molno]),
        print >> mdifh
    else:
        # merge solute and output as one
        first_solute = True
        for (s, n) in top.system:
            if s in solutes:
                if mode == "soln" and first_solute:
                    print >> mdifh, 1,
                    first_solute = False
                # do nothing if 
                # 1. not first solute
                # 2. refs system
            else:
                print >> mdifh, "%d" % n,
        print >> mdifh
        first_solute = True
        nsoluteatom = sum([len(top.molecules[top.moleculetypes[s]])
                           for s in solutes])
        for (s, _n) in top.system:
            if s in solutes:
                if mode == "soln" and first_solute:
                    print >> mdifh, nsoluteatom,
                    first_solute = False
            else:
                molno = top.moleculetypes[s]
                print >> mdifh, "%d" % len(top.molecules[molno]),
        print >> mdifh

    mdifh.close()
    
    solvent_cnt = 1
    first_solute = True
    ofh = None
    for (s, n) in top.system:
        if s in solutes and not first_solute:
            pass
        elif s in solutes:
            fn = "SltInfo"
        else:
            fn = "MolPrm%d" % solvent_cnt
            solvent_cnt += 1
        if not (s in solutes and not first_solute):
            if ofh:
                ofh.close()
            ofh = open(mode + "/" + fn, "wt")
            k = 1

        if s in solutes:
            first_solute = False
        molno = top.moleculetypes[s]
        nmol = 1
        if s in solutes and solute_merge:
            nmol = n

        for i in range(nmol):
            for (atype, _atom, charge, mass) in top.molecules[molno]:
                eps = top.atom2epsilon[atype]
                sig = top.atom2sigma[atype]
                atom = atomtype_of_mass(float(mass))
                print >> ofh, ("%d %s %.8g %.8g %.8g" % 
                               (k, atom, charge, eps, sig))
                k += 1
    ofh.close()
    # write carryover
    ofh = file(mode + "/.extraparam", "wt")
    pickle.dump(carryover, ofh)
    ofh.close()

gen("soln")
gen("refs")

