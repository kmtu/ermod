#!/usr/bin/env python

import os.path
import sys
import re
import copy
import pickle
from optparse import OptionParser

# Some routines are used for 2.3 compatibility
import warnings
warnings.simplefilter("ignore", DeprecationWarning)

################################################################
# Common modules, functions

if sys.version_info < (2, 6):
    from sets import Set
    set = Set

class union_find:
    """Tarjan's famous disjoint-set data structure.

    """
    def __init__(self, n):
        self.uftable_ = [-1] * n
    
    def union(self, i, j):
        pi = self.find(i)
        pj = self.find(j)
        if pi != pj:
            if self.uftable_[pj] < self.uftable_[pi]:
                temp = pi
                pi = pj
                pj = temp
            self.uftable_[pi] += self.uftable_[pj];
            self.uftable_[pj] = pi
    
    def find(self, i):
        if self.uftable_[i] < 0:
            return i
        else:
            newroot = self.find(self.uftable_[i])
            self.uftable_[i] = newroot
            return newroot

    def is_connected(self, i, j):
        pi = self.find(i)
        pj = self.find(j)
        return pi == pj

def log(x):
    if options.verbose:
        print >> sys.stderr, x

def warn_or_error(x, col):
    prefix = ""
    suffix = ""
    if os.isatty(sys.stderr.fileno()):
        prefix = "\x1b[" + str(col) + ";1m"
        suffix = "\x1b[0m"
    print >> sys.stderr, prefix + x + suffix

def warn(x):
    warn_or_error("Warning: " + x, 33)

def error(x):
    warn_or_error("Error: " + x, 31)
    sys.exit(1)

def safe_close(fh):
    # asynchronous NFS may miss file creation
    # esp. combined with delayed allocation (ext4, XFS)
    # The open-to-close consistency is preserved only when 
    fh.flush()
    os.fsync(fh.fileno())
    fh.close()

mass_table = {
  1: 'H',
  2: 'D',
  12: 'C',
  14: 'N',
  16: 'O',
  19: 'F',
  23: 'Na',
  31: 'P',
  32: 'S',
  35: 'Cl',
  36: 'Cl',
  40: 'Ca',
  56: 'Fe',
  63: 'Cu',
  64: 'Cu',
  65: 'Zn',
  80: 'Br' }
def atomtype_of_mass(mass):
    imass = int(round(mass))
    if imass not in mass_table:
        return "M" # dummy atom
    return mass_table[imass]

# End of common components
################################################################

parser = OptionParser()

# topology
parser.add_option("-t", "--top", dest = "topology",
                  help="topology (.top) file name")

# can be specified as string; otherwise specify interactively
parser.add_option("-s", "--solute", dest = "solute",
                  help = "Segment name of solute molecule",
                  default = None)

parser.add_option("-m", "--merge", dest = "merge",
                  help = "Merge these residues by name, not just the order",
                  default = "Na+,K+,Cl-,IP,IM,WAT")

parser.add_option("-v", "--verbose", dest = "verbose", action="store_true",
                  help = "Be more verbose",
                  default = False)

(options, args) = parser.parse_args()


if options.topology == None:
    error("Error: Topology file is not specified (try --help)")

def read_topology():
    topology = {}
    def parse_section_header(flag, format, lines):
        flag = flag.split()[1]
        log("Parsing topology: " + flag)
        format = re.match(r"%FORMAT\((\d+)([A-Za-z])(\d+)(\.\d+)?\)", format)
        if format == None:
            error("failed to parse topology file. Is topology file correctly written?")
        nrep = int(format.group(1))
        forttype = format.group(2).upper()
        coleach = int(format.group(3))
        # define converter
        converter = None
        if forttype == 'A':
            converter = str
        elif forttype == 'I':
            converter = int
        elif forttype == 'F' or forttype == 'E':
            converter = float

        # separate input data to nrep * coleach data
        result = []
        for l in lines:
            l = l.rstrip('\n')
            nelm = len(l) / coleach
            if nelm > nrep:
                nelm = nrep
            for i in range(nelm):
                result.append(converter(l[i*coleach:(i+1)*coleach].strip()))

        topology[flag] = result
        return

    fh = open(options.topology, "rt")

    flag = ""
    format = ""
    lines = []
    try:
        while True:
            l = fh.next()
            if l[0] != '%':
                error("unknown topology format")
            if l[0:6] == '%FLAG ':
                flag = l
                break

        while True:
            format = fh.next()
            try:
                while True:
                    l = fh.next()
                    if l[0] == '%':
                        newflag = l
                        break
                    lines.append(l)
                parse_section_header(flag, format, lines)
                lines = []
                flag = newflag
            except StopIteration:
                parse_section_header(flag, format, lines)
                break

    except StopIteration:
        error("unknown error on parsing topology, near: \"" + flag + "\"")
    return topology
    
topology = read_topology()
if topology == {}:
    error("Invalid topology format")

(natom, ntypes, nbondh, nbonda) = topology["POINTERS"][0:4]
nbond = nbondh + nbonda
nres = topology["POINTERS"][11]
log("Atoms: %d" % natom)
log("Atom types: %d" % ntypes)
log("No. of residues: %d" % nres)

charge_convert = 1 / 18.2223

# since there are no name for molecules, 
# the program must find molecular strcuture from (mainly) connectiviyties,
# and name the molecule with inferred name.

# scan connectivity
bonds = topology['BONDS_INC_HYDROGEN'] + topology['BONDS_WITHOUT_HYDROGEN']
conn = union_find(natom)
for i in range(nbond):
    atom1 = bonds[i * 3] / 3
    atom2 = bonds[i * 3 + 1] / 3
    conn.union(atom1, atom2)

residues = topology['RESIDUE_LABEL']
resptrs = (topology['RESIDUE_POINTER'] + [natom + 1])
residue_of_atom = []
for i in range(nres):
    resn = residues[i]
    for j in range(resptrs[i] - 1, resptrs[i + 1] - 1):
        residue_of_atom.append(resn)

# For future maintainers:
# the whole mess of the following codes can be cleaned up if we can use database (SQL). The only problem is that, users must install them.

# partition into segments
# [0]: union-find root
# [1]: residues
# [2]: atom numbers
segments = [(-1, 'dummy-residues', 'dummy-atoms')]
for i in range(natom):
    root = conn.find(i)
    if segments[-1][0] != root:
        segments.append((root, set(), []))
    segments[-1][1].add(residue_of_atom[i])
    segments[-1][2].append(i)
segments.pop(0)

# name segments
aminoacids = ["ALA", "ARG", "ASN", "ASP", "ASH", "CYS", "CYX", "CYM", "GLU", "GLH", "GLN", "GLY", "HIS", "HID", "HIE", "HIP", 
              "ILE", "LEU", "LYS", "LYN", "MET", "PHE", "PRO", "SER", "THR", "TRP", "TYR", "VAL"]

# Generated from:
# nucleicacids = ['A', 'C', 'G', 'T']
# def flatten(x):
#     return [a for i in x for a in i]

# nucleicacids = flatten([[c + "3", c + "5", c + "N"] for c in nucleicacids])
# nucleicacids = flatten([["D" + c, c] for c in nucleicacids])
nucleicacids = ['DA3', 'A3', 'DA5', 'A5', 'DAN', 'AN',
                'DC3', 'C3', 'DC5', 'C5', 'DCN', 'CN',
                'DG3', 'G3', 'DG5', 'G5', 'DGN', 'GN',
                'DT3', 'T3', 'DT5', 'T5', 'DTN', 'TN']
biomol_threshold = 4

for i in range(len(segments)):
    s = segments[i]
    aminocount = 0
    nuccount = 0
    for res in s[1]:
        if res in aminoacids:
            aminocount += 1
        if res in nucleicacids:
            nuccount += 1
    name = "_".join(list(s[1]))
    info = None
    if aminocount >= biomol_threshold:
        name = "Protein (%d atoms)" % len(s[2])
    elif nuccount >= biomol_threshold:
        name = "Nucleic acid (%d atoms)" % len(s[2])
    atomnames = [topology['ATOM_NAME'][x] for x in s[2]]
    # [0]: union-find root, [1]: residues, [2]: atom numbers,
    # [3] segment name, [4] atom names
    segments[i] = (s[0], s[1], s[2], name, atomnames)

log(segments)

(UFROOT, RESIDUES, ATOMIXS, SEGNAME, ATOMNAMES) = (0, 1, 2, 3, 4)

reorder_residues = options.merge.split(",")

# merges into first occurence
permutation = []
i = 0
while i < len(segments):
    segname = segments[i][SEGNAME]
    if segname in reorder_residues:
        # reorder!
        inspos = i + 1
        permutation += segments[i][ATOMIXS]
        for iscan in range(i + 1, len(segments)):
            if segname == segments[iscan][SEGNAME]:
                # reorder to this position
                permutation += segments[iscan][ATOMIXS]
                seg = segments[iscan]
                del segments[iscan]
                segments.insert(inspos, seg)
                inspos += 1
        i = inspos
    else:
        permutation += segments[i][ATOMIXS]
        i += 1

# merge same segments
merged = [{ "segname": segments[0][SEGNAME], "atoms": segments[0][ATOMIXS], "nmol": 1 }]

for i in range(1, len(segments)):
    if (segments[i - 1][RESIDUES] != segments[i][RESIDUES] or
        atomnames != atomnames):
        # new kind of segment
        merged.append({ "segname": segments[i][SEGNAME], "atoms": segments[i][ATOMIXS], "nmol": 0 })
    merged[-1]["nmol"] += 1

log(merged)

# Ask for solute name
if options.solute:
    solute = options.solute.split(',')
else:
    # interactive input
    print "Segment names in topology file:"
    print 
    for i in range(len(merged)):
        print "%d: %s" % (i + 1, merged[i]["segname"])
    print
    l = raw_input("""Which segments are solutes?
Specify as numbers or residue names:
(for multiple choice please specify as comma-separated list) """).split(',')
    print
    solute = [x.strip() for x in l]

if solute == []:
    error("Solute list is empty")

solute_num = []
# input validation
for s in solute:
    try:
        c = int(s)
        if c <= 0 or c > len(merged):
            error("Solute number out of range")
        solute_num.append(c - 1)
        continue
    except ValueError:
        pass
    
    found = False
    for i in range(len(merged)):
        segname = merged[i]['segname']
        if s == segname.split(' ')[0]:
            found = True
            solute_num.append(i)
            break
    
    if not found:
        error("No such solute name in topology: %s" % s)

solute_num.sort()
log("Selected segment number (0-0rigin): " + repr(solute_num))

# "Solute" is differently interpreted for a single molecule and multiple molecules.
# For a single molecule, even if there are multiple molecules for "solute", 
# they are not merged. This better suits for solution chemistry,
# where they may calculate e.g. 500 solutes in 500 waters.
# For multiple molecules they are merged if contiguous.
# Otherwise, it generates an error.
if len(solute_num) == 1:
    pass
else:
    # for multiple molecules
    storeto = solute_num[0]
    atomsall = merged[storeto]["atoms"] * merged[storeto]["nmol"]
    merged[storeto]["atoms"] = atomsall
    merged[storeto]["nmol"] = 1
    for i in range(1, len(solute_num)):
        if solute_num[i] != solute_num[i-1] + 1:
            error("""Solute is not contiguous.
Such structure is not supported on this version of gen_structure""")
        # merge them into solute_num[0]
        merged[storeto]["atoms"] += merged[solute_num[i]]["atoms"] * merged[solute_num[i]]["nmol"]
        merged[solute_num[i]] = None
solute = solute_num[0]

i = 0
while i < len(merged):
    if merged[i] == None:
        del merged[i]
    else:
        i += 1

log(merged)

# Output the structure.
for mode in ["soln", "refs"]:
    log("Output MDinfo")
    # Output MDinfo
    if not os.path.exists(mode):
        os.mkdir(mode)
    mdifh = file(mode + "/MDinfo", "wt")

    mols = copy.deepcopy(merged)
    nmol = []
    natoms = []
    for i in range(len(mols)):
        if mode == "refs" and i == solute:
            mols[i]["nmol"] -= 1
        s = mols[i]
        nm = s["nmol"]
        na = len(s["atoms"])
        if nm != 0:
            nmol.append(nm)
            natoms.append(na)
    print >> mdifh, "FRAMES %d" % len(nmol)
    print >> mdifh, " ".join([str(x) for x in nmol])
    print >> mdifh, " ".join([str(x) for x in natoms])
    safe_close(mdifh)

    log("Output MolPrm")
    # Output MolPrm
    solvent_cnt = 1
    iatom = 0
    for i in range(len(mols)):
        if i == solute:
            fn = "SltInfo"
        else:
            fn = "MolPrm%d" % solvent_cnt
            solvent_cnt += 1
        ofh = open(mode + "/" + fn, "wt")
        s = mols[i]
        for j in s["atoms"]:
            atom = atomtype_of_mass(topology["MASS"][j])
            charge = topology["CHARGE"][j] * charge_convert
            ljtype = topology["ATOM_TYPE_INDEX"][j]
            print >> ofh, ("%7d %3s %10.5f %4d 0" %
                           (j + 1, atom, charge, ljtype))
        safe_close(ofh)
    
    log("Output LJ table")
    # Output LJ table
    fh = open(mode + "/LJTable", "wt")
    ico = topology["NONBONDED_PARM_INDEX"]
    cn1 = topology["LENNARD_JONES_ACOEF"]
    cn2 = topology["LENNARD_JONES_BCOEF"]

    # Convert back to length and eps
    lentable = [[None] * ntypes for i in range(ntypes)]
    enetable = [[None] * ntypes for i in range(ntypes)]

    for i in range(ntypes):
        for j in range(ntypes):
            acoeff = cn1[ico[(i * ntypes) + j] - 1]
            bcoeff = cn2[ico[(i * ntypes) + j] - 1]
            if bcoeff == 0.0:
                lentable[i][j] = 0
                enetable[i][j] = 0
            else:
                r = acoeff / bcoeff
                lentable[i][j] = r ** (1. / 6.)
                enetable[i][j] = bcoeff / (4.0 * r)
    
    print >> fh, ntypes
    for i in range(ntypes):
        print >> fh, " ".join(["%11.5E" % lentable[i][j]
                               for j in range(ntypes)])
    for i in range(ntypes):
        print >> fh, " ".join(["%11.5E" % enetable[i][j]
                               for j in range(ntypes)])
    safe_close(fh)

    # Output Extraparam
    extra = {'sltpick': solute + 1}
    fh = open("soln/.extraparam", "wt")
    pickle.dump(extra, fh)
    safe_close(fh)
                             
    # Output permutation
    log("Output Permutation")
    perm = permutation
    if mode == "refs":
        # This part is a bit tricky.
        # get solute indices...
        solute_begin = sum([len(mols[i]["atoms"]) * mols[i]["nmol"] for i in range(solute)])
        nsolute = len(mols[solute]["atoms"])
        solute_orig_indices = set(perm[solute_begin:(solute_begin + nsolute)])

        # atom indices from soln to refs!
        refs_of_soln = natom * [0]
        
        # the following code takes O(N log M) time, but presumed to be acceptable...
        curslide = 0
        for i in range(natom):
            refs_of_soln[i] = i - curslide
            if i in solute_orig_indices:
                refs_of_soln[i] = None
                curslide += 1

        # recostruct perm
        perm = []
        log("# permutation = %d" % len(permutation))
        log("# refs_of_soln = %d" % len(refs_of_soln))
        for i in range(solute_begin):
            perm.append(refs_of_soln[permutation[i]])
        for i in range(solute_begin + nsolute, natom):
            perm.append(refs_of_soln[permutation[i]])
    
        log(perm)

    fn = mode + "/PermIndex"
    if perm == range(len(perm)):
        # yay, not necessary!
        if os.path.exists(fn):
            os.unlink(fn)
        continue

    fh = open(fn, "wt")
    for s in perm:
        print >> fh, s + 1
    safe_close(fh)

