#!/usr/bin/env python

import sys
import os.path

if len(sys.argv) < 2:
    print >> sys.stderr, "usage: gen_MDinfo <psf file> [segname[,segname...]]"
    sys.exit(1)

psf = sys.argv[1]

fh = file(psf, "rt")

l = fh.next()
if l[0:3] != "PSF":
    print >> sys.stderr, "Error in PSF header"
    sys.exit(1)

l = fh.next() # dummy line
l = fh.next().split()
title_lines = int(l[0].strip())
for i in range(title_lines):
    l = fh.next()
l = fh.next() # single line dummy

l = fh.next().split()
natoms = int(l[0].strip())
atoms = [None] * natoms

for i in range(natoms):
    l = fh.next().split()
    #         serial     segname resid    resname aname atype charge
    atom = (int(l[0]), l[1], int(l[2]), l[3], l[4], l[5], float(l[6]), float(l[7]))
    atoms[i] = atom
l = fh.next() # single dummy line after each block

# make list of segment names
segnames = set([])
for a in atoms:
    segnames.add(a[1])

if len(sys.argv) > 2:
    solute = sys.argv[2].split(',')
else:
    # interactive input
    print "Segment names in psf files:",
    for s in segnames:
        print s,
    print
    l = raw_input("Which segments are solute? (please specify as comma-separated list) ").split()
    solute = [x.strip() for x in l]

for s in solute:
    if s not in segnames:
        print >> sys.stderr, "No such segname in psf: %s" % s
        sys.exit(1)

# determine system size

# determine where residue begins / ends
prev = ("", 0, "")
curbegin = 0 # 0-origin
restable = []
for i in range(natoms):
    a = atoms[i]
    cur = (a[1], a[2], a[3])
    if prev != cur:
        restable.append((curbegin, i, prev[2], prev[0]))
        prev = cur
        curbegin = i
restable.append((curbegin, natoms, prev[2], prev[0]))
del restable[0] # remove dummy

# consolidate everything
solute_magic = "!solvent!"
natom = 0
nsoluatoms = 0
residues = []
resres = []
resatoms = []
res = ""
nres = 1
solnstart = False
solnend = False
prevresn = 0

# a bit spaghetti...
for (rb, re, resname, segname) in restable:
    if segname in solute:
        solnstart = True
        resname = solute_magic
        nsoluatoms += re - rb
        if solnend:
            print >> sys.stderr, """Error: solute is ill-formed.
 Solute must occupy contiguous atom indices."""
            sys.exit(1)
    else:
        if solnstart:
            solnend = True
    print rb, re, resname, segname
    if res != "":
        if res == resname:
            nres = nres + 1
            assert(natom == re - rb or resname == solute_magic)
        else:
            residues.append(res)
            resres.append(nres)
            resatoms.append(natom)
            nres = 1
    res = resname
    natom = re - rb
residues.append(res)
resres.append(nres)
resatoms.append(natom)
            
# set solute as a single molecule (no matter how really is)
print residues, resres, resatoms
slupos = residues.index(solute_magic)

if not os.path.exists("soln"):
    os.mkdir("soln")
solnfh = file("soln/MDinfo", "wt")
print >> solnfh, "FRAMES %d" % len(residues)
for i in range(len(residues)):
    print >> solnfh, "%d" % resres[i],
print >> solnfh
for i in range(len(residues)):
    print >> solnfh, "%d" % resatoms[i],
print >> solnfh
solnfh.close()

if not os.path.exists("refs"):
    os.mkdir("refs")
refsfh = file("refs/MDinfo", "wt")
print >> refsfh, "FRAMES %d" % (len(residues) - 1)
for i in range(len(residues)):
    if i != slupos:
        print >> refsfh, "%d" % resres[i],
print >> refsfh
for i in range(len(residues)):
    if i != slupos:
        print >> refsfh, "%d" % resatoms[i],
print >> refsfh
refsfh.close()
    


