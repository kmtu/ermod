#!/usr/bin/python

# requires python >= 2.3

import os.path
import sys
from optparse import OptionParser

sigma_conv = 2.0e0 ** (5.0/6.0) # from Rmin/2 to sigma

parser = OptionParser()
parser.add_option("-p", "--param", dest="param", action="append", 
                  help="CHARMM parameter file name (can be specified multiple-time)",
                  default = [])
parser.add_option("-s", "--solute", dest="solute", type="int",
                  help="Group no. of solute molecule (in MDinfo file, 1-origin)",
                  default = None)
parser.add_option("-t", "--psf", dest="topology",
                  help="PSF file name", 
                  default = None)
parser.add_option("--ljrescale", dest="ljrescale",
                  action="store_true",
                  help="(internal use only)", 
                  default = False)

(options, args) = parser.parse_args()

# check file existence
if not os.path.exists("MDinfo"):
    print >> sys.stderr, "Error: MDinfo does not exist!"
    sys.exit(1)

if options.param == []:
    print >> sys.stderr, "Error: CHARMM parameter file does not exist (try --help)"
    sys.exit(1)

if options.solute == None:
    print >> sys.stderr, "Error: solute number is not specified (try --help)"
    sys.exit(1)

if options.topology == None:
    print >> sys.stderr, "Error: topology is not specified (try --help)"
    sys.exit(1)

for f in options.param:
    if not os.path.exists(f):
        print >> sys.stderr, "Error: parameter file \"%s\" does not exist!" % f
        sys.exit(1)

if not os.path.exists(options.topology):
    print >> sys.stderr, "Error: psf file does not exist!"
    sys.exit(1)

atomtable = {}
for parfile in options.param:
    fh = open(parfile, "rt")
    state = False
    for l in fh:
        l = l.strip()
        if len(l) == 0:
            continue
        while l[-1] == '-':
            l = l + fh.next()
            l = l.strip()
        # skip '!' and after
        line = l.split("!")[0]
        if len(line) == 0 or line[0] == '*': # another style for comment
            continue
        ls = line.split()
        if len(ls) == 0:
            continue
        kwd = ls[0]
        if kwd == 'NONBONDED':
            state = True
            continue
        if kwd in ['NBFIX', 'HBOND', 'BONDS', 'ANGLES', 'DIHEDRALS', 'IMPROPER', 'CMAP', 'end', 'return']:
            state = False
            continue
        if not state:
            continue
        # inside NONBOND-section
        atoms = ls[0]
        eps = -float(ls[2])
        rmin = float(ls[3])
        if options.ljrescale:
            rmin = sigma_conv * rmin
        atomtable[atoms] = (eps, rmin)
    fh.close()

mass_table = {
  1: 'H',
  2: 'D',
  12: 'C',
  14: 'N',
  16: 'O',
  19: 'F',
  23: 'Na',
  31: 'P',
  32: 'S',
  35: 'Cl',
  36: 'Cl',
  40: 'Ca',
  56: 'Fe',
  63: 'Cu',
  64: 'Cu',
  65: 'Zn',
  80: 'Br' }
def atomtype_of_mass(mass):
    imass = int(round(mass))
    return mass_table[imass]

fh = open("MDinfo", "rt")
l = fh.next()
(frames, numtype) = l.split()[0:2]
frames = int(frames)
numtype = int(numtype)
nummols = fh.next().split()[0:numtype]
numsites = fh.next().split()[0:numtype]
nummol = [int(e) for e in nummols]
numsite = [int(e) for e in numsites]
ntotal = 0
for i in range(numtype):
    ntotal += nummol[i] * numsite[i]
fh.close()

fh = open(options.topology, "rt")
fh.next()
fh.next()
l = int(fh.next().split()[0])
for i in range(l):
    # skip
    fh.next()
fh.next() # skip blank
n = int(fh.next().split()[0])
if n != ntotal:
    print >> sys.stderr, "Error: number of atoms in MDinfo and psf is inconsistent"
    sys.exit(1)

ofh = None
solvent_cnt = 1
for i in range(numtype):
    if i == options.solute - 1:
        fn = "SltInfo"
    else:
        fn = "MolPrm%d" % solvent_cnt
        solvent_cnt += 1
    ofh = open(fn, "wt")
    for j in range(nummol[i]):
        for k in range(numsite[i]):
            ls = fh.next().split()
            (_aid, _seg, _resi, resname, _atomname, atomtype, charge, mass, _) = ls
            if j == 0:
                (eps, rmin) = atomtable[atomtype]
                atom = atomtype_of_mass(float(mass))
                print >> ofh, ("%d %s %g %g %g" % 
                               (k + 1, atom, float(charge), eps, rmin))
        ofh.close()


        
